package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _templates_benchlist_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x94\x8f\xc1\x4e\xc4\x20\x10\x86\xcf\xed\x53\x10\x2e\xd5\x44\xbb\xf7\x95\xf6\xa8\x9e\xcd\xbe\x00\xb6\x53\xc0\x20\x6c\x86\xb1\x6a\x48\xdf\x5d\x0a\xa1\x07\x4f\x7a\x81\xf9\x61\xfe\xef\x9f\x89\x71\x86\xc5\x38\x60\xfc\x15\xdc\xa4\xad\x09\xc4\xb7\xad\x6d\x63\x44\xe9\x14\xb0\x3e\x09\x41\xc8\x26\x2b\x43\x18\x38\xfa\xcf\x27\xf4\x1f\xd7\x18\xfb\x7c\x6f\x1b\x1f\xdb\x46\x90\x4e\x67\x13\xa3\x59\x58\xff\xec\x03\x25\x53\xd3\x08\xc9\x34\xc2\x32\xf0\x37\xb9\xca\x30\xa1\xb9\xd2\x99\xbc\x52\x16\x1e\x8d\x25\xc0\x9b\x6e\x6f\xed\xee\x58\x37\x24\x5c\xb1\x75\xb7\x0f\x7c\x3c\x94\x38\xc9\xc2\x05\x37\x67\x64\x49\x78\x81\xf5\x8f\x01\xa9\xb3\xf2\xb3\x29\xe3\xb1\xaa\xdf\x78\x71\xca\x7b\x1c\xab\x5f\xcc\x3b\x84\xfd\xa3\xc4\x5e\x3c\x49\x9b\xfb\x48\xb3\x40\xdf\x16\x06\x4e\xf0\x45\xf7\xd2\x1a\xe5\xce\x68\x94\xa6\x3c\xfc\xee\xdb\xe9\x34\x67\x1a\xd8\x00\xc5\x36\xff\xcb\x56\x86\xaa\x45\x7a\xc7\xb1\xad\xea\x28\x7e\x02\x00\x00\xff\xff\x84\x6d\xa4\xb6\xc0\x01\x00\x00")

func templates_benchlist_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_benchlist_html,
		"templates/benchlist.html",
	)
}

func templates_benchlist_html() (*asset, error) {
	bytes, err := templates_benchlist_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/benchlist.html", size: 448, mode: os.FileMode(420), modTime: time.Unix(1425687616, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_compare_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x56\xdd\x8e\xdb\x36\x13\xbd\xb6\x9f\x82\x1f\xbf\xa0\x2b\xc3\xbb\xf2\x06\xbd\x29\x64\xc9\x05\x92\x22\x45\x8a\x6d\x53\x74\x93\xe6\x62\x51\x14\x94\x44\x4b\x8c\x69\x49\x20\x29\x77\x17\x86\xde\xbd\x33\x43\x4a\xfe\x49\xd0\x8b\x6c\xc8\xe1\xcc\x99\x99\x33\x87\x94\xd3\xda\xed\xf5\x66\x3e\x4b\x6b\x29\x4a\xf8\x7f\x96\x3a\xe5\xb4\xdc\xbc\x6d\xf7\x9d\x30\x92\xdd\xb1\x37\xb2\x29\xea\x37\xc2\x4a\xf6\x59\xe6\x9f\xde\xa7\x2b\xef\x00\xae\xc7\xa3\x93\xfb\x4e\x0b\x27\x19\xb7\xee\x45\x4b\x5b\x4b\xe9\x2c\x67\xf1\x30\x00\xe2\xca\x43\xc2\x2a\x6f\xcb\x17\x5c\x5c\x44\x34\xe2\x90\x0b\xe3\x9d\xe9\x48\x6d\x59\xfc\x93\xcc\xfb\x0a\xa3\xa1\x90\x52\x1d\x58\xa1\x85\xb5\x19\xaf\x55\x55\x6b\xf8\xe7\x38\xa3\x44\x19\xff\x47\x95\xae\x4e\xd8\x0f\xf7\xf7\xdd\xf3\x7a\x2f\x4c\xa5\x9a\x44\xf4\xae\x0d\xeb\xbb\xbc\x75\xae\xdd\x27\xec\x7b\x3c\xe7\x9b\xe3\x31\xfe\xf4\xc7\xc3\x30\xa4\x2b\x40\xf5\xb5\xcb\xa6\xf4\x99\xd3\x56\x33\x55\x66\x7c\xdb\x16\xbd\xfd\x5b\x2b\x0b\x59\x42\xde\xdc\x40\x0b\x85\xe9\xf7\xf9\xb7\x13\xb3\xf3\xcc\xec\xdb\xa9\xb1\x17\xdf\xdc\x3b\x4c\x10\x9a\xd3\x6a\x93\x0a\x56\x1b\xb9\xcd\xf8\x17\x71\x10\xb6\x30\xaa\x73\x89\x95\xee\x77\x51\xc9\xe8\x48\xc5\x24\x37\x37\xc3\x02\x20\xc2\x30\xd2\x95\xd8\xa4\x2b\x88\xf4\x90\x52\x5b\x79\x42\x9b\x7c\x4e\xe7\xd4\x20\x9c\xae\x5a\x4d\xec\x13\xa3\xd8\x69\xe1\x7d\xc7\xda\x8c\x68\x2a\xc9\xe2\x8f\x22\x87\x11\x06\x44\x87\x9b\x91\x06\xbf\xa1\xbf\x77\x75\x7b\x90\x26\xac\xad\x83\xa2\x65\x19\x76\x79\x6b\x4a\x69\xa6\x6d\xd3\x36\x5b\xdd\xab\xd2\x67\x01\xc4\x51\x61\xb4\x31\x1b\x30\x8c\x9c\x3a\xf9\xec\xee\x04\x0c\xb8\x49\x0a\xd9\x38\x69\xd6\x30\x81\x56\xdb\x4e\x34\x19\x87\xd1\x7d\x46\xce\x87\x81\xc6\xf8\x16\xc4\x53\xb5\xe6\x05\x67\xe9\x6a\xe0\x03\xa0\x3c\xe8\xb9\xb8\x48\xa3\xa8\xc4\x8f\xb4\xf0\x4d\xcd\x30\x22\x68\x92\x8a\xf0\xba\x0c\xc1\x81\x05\x92\xfb\xcf\xa6\xed\x3b\xeb\xe5\x71\x0d\x9d\xa3\x83\x57\x49\x3c\x79\x9c\xd8\xa6\x2c\x13\x30\xac\x91\x8c\x4d\x9a\x9b\xaf\xa6\x42\x4a\xbc\xbe\x46\x24\x03\x3b\x41\xa7\xde\xb0\x99\x6f\xfb\xa6\x70\xaa\x6d\xd8\xa8\x10\xa0\xcc\x88\x05\x3b\xce\x67\x25\x48\x65\x0f\xb4\xc5\xba\x2d\x04\xf9\x64\x20\xc5\x9d\x7c\x50\xcd\x2e\xb8\xad\xe7\xc3\x05\x02\x29\x31\x22\x8d\x11\xc4\x95\xec\xe8\xef\x40\x51\xa7\x30\xd7\x56\x95\x96\xef\x94\x86\xf9\x44\xb6\x93\xc5\x2d\x3b\x08\xdd\x4b\x02\x38\x08\xc3\xb6\x74\x64\x21\xfb\x71\x58\x9f\x9b\x1e\x41\x26\x4d\x05\x76\x9c\xa5\x07\x00\x6e\x39\xf8\xc0\xad\x88\x2e\x7c\xfe\x07\x4e\x7c\x01\x8d\x9f\xc0\x7e\x79\xfc\xf0\x5b\x0c\x72\xb5\xf2\xc2\x75\x71\x11\x6e\x9f\xb0\xa2\xbf\x58\x96\x85\xa2\x00\xa2\x94\x5a\x02\xa7\x17\x0e\x10\x84\xd7\xe6\x94\x60\x8c\xf3\x61\xeb\x73\x2a\xc8\x21\xa1\xf4\x96\x52\xaa\xed\xcb\x98\x6e\x71\xcd\xce\x15\xe1\x23\x27\xa5\x70\x02\x09\x81\x84\x98\x28\x21\x0a\x1e\x61\x05\xfd\xdf\x82\x91\xb2\xda\x04\xad\x7f\xd2\x32\xd8\xe1\x2a\xb4\x46\x92\xfd\x3d\x2d\x83\x3d\xa4\x4f\x2e\x99\xc4\x13\xba\x7c\x50\x24\x1d\x7d\x08\x9b\x70\xb6\x17\xcf\x64\xfe\x55\x3c\x07\x4b\x29\x3b\x78\xc5\x5e\x13\x24\x8d\x9c\x00\xfd\xfb\xc4\xe7\x33\x98\xdf\x7c\xf6\x2a\x96\xa2\xa8\x7d\x43\xb7\x6c\xec\x34\xda\xdd\x1e\xa8\xbd\x19\xf6\xf6\xb4\x23\xee\x80\x37\x24\xc4\xf7\x0c\xb3\x12\x7b\x9c\xdc\x13\xd2\x1d\x50\xd0\xf9\x02\x84\x05\x14\xef\x1d\x77\xbd\xad\xa3\x1d\x5b\xf2\x8c\x2f\x0f\x8b\x09\xcf\x48\xd7\x9b\x86\xf1\x55\x78\xb2\x7e\xe4\x6c\x19\x12\xc4\x5f\x5a\xd5\x44\xfc\x3b\x4e\x93\xc0\x0b\x35\xde\x95\xf9\xd7\x0f\xee\x74\x8f\x48\x95\x68\x1e\xe5\x18\x7a\x5e\x9f\x4e\x1e\xe0\x6e\xc3\x29\xad\x63\xdb\x69\xe5\x22\x1e\x63\x16\x6a\x0e\x5e\x6c\xf5\x8c\xc1\x10\x12\x7a\x9b\xa2\xce\x1a\x54\xb7\x70\x61\x76\xb2\xa1\x26\x51\xa7\x0a\xb5\x7d\x8f\xba\x0c\x10\x4b\xc0\x88\xf1\x12\x9c\xf6\x14\x81\x6d\xfb\x80\x2c\x3b\x15\x14\x6b\xd9\x54\xae\xbe\x7b\x8d\x08\xaf\x22\xfe\xff\xb3\xaf\xd5\x22\x16\x5d\x07\xef\x4a\xc4\xf1\x43\xc0\x97\x04\xb3\xe4\xf4\x29\xc0\xba\x47\xc9\xff\x67\xd8\xf8\x35\xba\x41\x86\x27\x35\x87\x07\xc1\x97\x38\x2c\xe0\x88\xdf\x6c\xd0\x83\x72\xe0\x76\xfa\x28\xd1\x1c\x30\xdb\xd9\x24\xce\x1e\xbc\x74\xe5\x1f\x45\xf8\x59\x40\xbf\x38\xfe\x0d\x00\x00\xff\xff\x5a\x8a\x6f\xf6\x79\x08\x00\x00")

func templates_compare_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_compare_html,
		"templates/compare.html",
	)
}

func templates_compare_html() (*asset, error) {
	bytes, err := templates_compare_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/compare.html", size: 2169, mode: os.FileMode(420), modTime: time.Unix(1426526437, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_filters_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xbc\x56\x4d\x6f\xe3\x36\x10\x3d\x47\xbf\x62\x96\x2d\xd6\x32\x12\x5b\x49\x1a\x14\x85\x23\xa9\x30\xda\x06\xdd\x16\xdb\x04\xbb\xed\x29\xc8\x81\x91\x28\x9b\x08\x4d\x09\x14\xe5\xda\x35\xfc\xdf\x3b\xfc\x90\x21\xc5\x36\xb0\x69\x93\xbd\x24\xd2\xcc\xf0\xbd\x79\xf4\x7c\x68\xb3\xc9\x59\xc1\x25\x03\x52\x70\xa1\x99\xaa\xc9\x76\x1b\xc4\xf3\xcb\xf4\xc6\xbd\xc6\x11\x3e\x07\x71\x05\xb5\x5e\x0b\x96\x90\xa2\x94\x7a\x64\x9f\x27\x5c\x53\xc1\xb3\x6b\x92\x86\xbf\x33\x56\xc1\xa3\xa0\xf2\x09\x74\x09\x7c\x26\x4b\xc5\x86\x71\x54\xe1\xc1\xa2\x54\x8b\x34\x38\x89\x73\xbe\x84\x4c\xd0\xba\x4e\x88\x2a\xff\x26\x68\xea\xd9\xb2\x52\x8c\xc4\x6c\xf4\x9d\x75\xf4\x3c\x06\x60\x34\x53\x65\x53\x39\xdf\x49\x2c\xe8\x23\x13\x80\xf6\x84\xcc\xcb\x5a\x7f\x90\x55\xa3\x37\x9b\xf1\x76\x4b\xd2\x5f\xf1\x3d\x8e\x6c\x80\x0f\xe6\xc6\xdb\xc3\xca\x50\x81\x2a\x05\x01\x9e\xef\x01\x40\x25\x68\xc6\xe6\xa5\xc8\x19\xa2\xff\xb2\x9a\x40\x76\x35\x5e\x09\xaa\x66\xcc\x67\x16\x61\x6a\x36\xf9\xdd\xc3\xff\x57\xa1\xd8\xd2\xe6\x40\xd2\xcf\x4b\x09\x9f\xd8\x92\xd7\xbc\x94\x2f\xd2\xd1\x42\x1c\x93\x71\x71\x71\xf9\xc3\xc5\x1b\x4a\xd0\x73\xc5\x68\x5e\x7b\x19\x7f\xba\x37\x68\x6a\x96\xbf\x48\x46\x17\xe6\x98\x94\xab\xb7\x97\x71\xc7\xd4\x4f\x77\x7f\x1d\x10\x03\x15\x53\x80\xae\xff\x22\xaa\x03\x7a\xf4\x57\x3a\x22\x6d\xf7\xff\x15\xbb\x68\x7e\x95\xde\x2a\x64\x86\xc7\xf5\x04\x9b\xfc\xaa\x77\x19\x2d\x07\xcd\x79\x39\xe2\x52\xe0\x80\xf0\xe7\x5a\xb5\x7a\x5d\x31\x1f\x40\x40\xd2\x05\xbe\x94\x06\x8e\xcb\x99\x57\xb7\xa4\xa2\x41\x2b\x96\x33\x81\x6c\xce\xb2\x27\x86\x77\xe1\x1f\x48\x8a\xe6\x33\x30\xed\xea\x68\x7b\xf7\xf9\xea\x39\x18\x1e\x37\x1c\xce\x4c\x7b\xed\x51\xbe\x49\x2d\x2d\xe8\xea\x13\xab\x1b\xa1\x6b\x3f\x9c\x3e\xd2\x15\x28\x67\x69\xc9\x21\x3c\x37\xc1\xd0\xa0\xbc\x05\xd7\x2c\x1f\x7e\x51\x45\x3d\x87\x6e\x75\x5e\x9e\x3f\x2b\xaa\xf3\x17\xf4\xca\xf7\x5f\x58\x35\x37\xa5\xca\x18\x50\x49\xc5\xfa\x1f\x06\xd3\xbb\x0f\x3f\xbe\x4e\xf9\x14\x06\x77\xea\x60\xfb\xb2\x0e\xd5\xcf\x54\xae\x5f\xb7\x72\x8e\xd3\x6b\xd5\x30\x43\xb8\x13\xfc\xb5\x88\x0b\x2a\x6a\x04\xf8\x99\x2b\x96\xe9\x83\xc4\xc7\x26\x45\x1c\xb9\xbd\x1b\xc4\x75\xa6\x78\xa5\xd3\x80\x17\x10\x1a\xf2\xb2\x00\xb7\xe8\x3f\xd2\x27\x5c\xef\x90\x24\x30\x68\xa4\xfb\x06\xc8\x07\x43\xd8\x04\x27\x7d\x3f\x6c\xb6\xd7\xc1\x36\x08\xa2\x08\xa6\xb9\x1d\x80\x23\x4d\x1f\xa1\x68\x64\xa6\x71\x4b\x05\xdd\xe8\x7b\xe2\x04\x3c\xe0\xb1\x36\x00\x42\x0b\xba\xa4\xca\x13\xb7\x98\xce\x66\x16\x30\x1a\xbe\x0d\xc9\x37\xcf\x76\xf1\x70\x8c\xd7\x10\x0e\xaf\x83\x13\x93\xbb\x8d\x7b\x97\x00\x21\x16\xce\x27\x89\x8c\xb6\xb7\x0d\xa1\x89\xc0\xe0\xad\x07\xc6\x8d\xe8\x71\xfb\xbb\xb1\x0f\x6b\xa2\x3a\xa8\xee\x10\xfe\x1d\x2b\x66\x1b\x29\x8c\x54\x74\x06\x83\x81\x89\xb7\xb0\x99\xf7\x67\x73\xaa\xa6\x3a\x3c\xb7\x0e\x83\x44\x92\x34\x7e\x47\xc6\x1c\xef\x72\x75\x5b\x84\xd9\xd0\x5c\xed\xe8\xc2\x36\xb4\x83\x25\x09\x81\x53\x73\xf8\xba\x9b\xbf\x99\x8f\x0f\x0e\xb4\x93\xbd\xdf\x19\x5e\xc1\xfe\x5a\xec\xab\x68\xa3\x0f\xdd\x8f\x5f\x5f\x96\xc3\xc7\xed\xf3\xb8\xdd\xd4\x67\xdb\xdb\x57\x07\x39\xfd\xc9\xe3\xcc\x2e\xa0\x4b\xef\x2c\x9d\x24\xda\x59\x62\xe9\x6d\x9f\x4c\x6c\x87\xdc\xdb\x06\xd9\xeb\x8f\x87\x49\x3b\x05\xfa\x19\xb5\x30\x87\x72\xb9\xe9\x80\xd8\x5c\x7c\x70\x27\x8b\x76\x75\xa0\x73\x70\x4f\x06\xf8\x53\x1d\xca\xa6\xb7\x60\xf6\x32\xc1\x43\x03\xf2\x30\xc0\xe2\xee\x56\x3c\x22\xfe\xf6\xf9\xf6\x8f\x71\xad\xcd\x49\x5e\xac\x43\x9f\xd7\xb0\xed\x82\x85\xbf\xfa\xe7\x83\x7d\x27\x30\xc0\x1a\xd2\x8d\x92\xbb\xcf\xf4\x84\x9c\xba\xa7\x53\xf2\xbe\xcd\xc9\xd6\xd7\x4e\xc6\x29\x90\xf7\x88\x67\x8d\x0b\xd3\xc2\x71\xd4\x0e\x83\x60\xb3\x61\x32\xc7\x0f\xfd\x7f\x03\x00\x00\xff\xff\xb9\x78\x3c\xec\xfe\x0b\x00\x00")

func templates_filters_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_filters_html,
		"templates/filters.html",
	)
}

func templates_filters_html() (*asset, error) {
	bytes, err := templates_filters_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/filters.html", size: 3070, mode: os.FileMode(420), modTime: time.Unix(1426525914, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_index_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xcc\x93\x31\x6f\xdb\x30\x10\x85\x67\xf3\x57\x10\x4c\x07\x69\x88\x92\x14\x9d\x2c\x4b\x83\xd3\xa5\x40\xd7\xa2\x63\x41\x91\x97\xea\x50\x8a\x14\x48\x5a\xb6\x61\xe4\xbf\xf7\x68\x5a\x68\x64\xa7\x7b\xe0\xc1\xc2\xe9\xe9\xde\xf7\x78\xbc\x4d\x1f\x07\xd3\xb2\xd5\xa6\x07\xa9\xe9\x7f\xb5\x89\x18\x0d\xb4\x5b\xb0\xaa\xdf\xca\x00\xfc\x27\x74\x3f\xbe\x6d\x1e\x72\x99\x91\xe2\x74\x8a\x30\x8c\x46\x46\xe0\x22\xc4\xa3\x81\xd0\x03\xc4\x20\x78\xf5\xfa\x4a\x8d\x1e\x72\x27\x7a\xea\x9c\x3e\xd2\xc3\xd5\x27\x56\x4e\x9d\xf4\x59\x9d\xfc\x34\x4e\x1c\x75\x23\x0c\x86\xf8\x15\x27\xc1\x95\x91\x21\x34\x42\x39\x1b\x25\x5a\x20\xe9\xd9\xa5\x11\x1a\x03\xf5\x38\xae\xad\xb3\x50\x77\xce\x6b\xf0\x6b\xfe\x34\x1e\x78\x70\x06\x35\xbf\xeb\x1e\xd3\xaf\xe6\xf9\xd5\xbd\x97\x1a\x77\x61\xfd\x65\x3c\xd4\xa3\xd4\x1a\xed\xef\xfb\xce\xc5\xe8\x86\xf5\xe7\x47\xaa\x89\x94\x76\x41\x86\x56\xc3\xe1\x57\xe2\x10\x29\x09\x45\x21\xb6\xf6\x2d\xa3\x72\xc3\x28\x3d\x7c\x04\xcc\x0b\xca\x82\xf4\x7a\x38\xca\xe3\x38\x0f\x26\xa9\x72\xa1\x65\x2f\x3b\xab\x22\x3a\xcb\xdd\x08\xf6\x3b\xe5\x2d\x4a\x7e\x62\xab\x4f\x85\xb8\x4b\xe9\xb7\xd1\x8a\xb2\x22\x96\xe7\x14\xb1\x10\x92\xc4\x13\x88\xb2\xce\x92\x8b\x73\x56\x79\x18\xdc\x04\x37\xc2\x85\x32\x1d\x57\x59\xf5\xa8\xa1\x98\x7b\xcc\xc3\x2e\xab\xd0\xbb\x7d\x2a\x13\xe1\x02\xeb\x39\x7f\xfb\x1e\xd9\x7f\x3c\x6f\xe1\xde\x8b\x70\xed\xbf\xc0\x5a\x00\xbf\x21\x5b\xfa\x2b\x83\xea\x4f\x31\x9f\x5d\xc9\x6e\x7c\xff\x09\x2e\x29\x4a\xc6\x26\xe9\x79\x2f\x43\xcf\x1b\xbe\xa7\x09\xba\x7d\x65\x9c\x92\x29\x6e\x95\xca\x55\xd8\x75\x21\x7a\x9a\x7e\xf1\x44\x9e\xf8\xc2\x8b\xac\x6e\xf8\x7c\xeb\x44\xc9\x56\x8b\x93\xa9\x19\x98\x00\xb9\x98\xa7\x58\x9f\xef\xc2\x3c\xe6\xb4\x8c\x79\x07\x69\x29\xcf\x6b\xfe\x37\x00\x00\xff\xff\xf9\x5f\x26\xea\xee\x03\x00\x00")

func templates_index_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_index_html,
		"templates/index.html",
	)
}

func templates_index_html() (*asset, error) {
	bytes, err := templates_index_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/index.html", size: 1006, mode: os.FileMode(420), modTime: time.Unix(1426524819, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_index_compare_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\xdf\x6f\xd3\x30\x10\x7e\x6e\xfe\x0a\xcb\x20\xd4\x6a\xb4\x81\xf2\xb6\x26\x41\x62\x12\x62\x88\x1f\x13\x83\xa7\x6a\x42\x6e\xe2\xb6\x56\x1d\xdb\xb2\x9d\x6a\x55\xd5\xff\x9d\xf3\x8f\xa4\x69\x37\xd0\x1e\xd8\xc3\x9a\xb3\xef\xbb\xfb\xbe\xb3\xef\xbc\xfd\xbe\xa2\x4b\x26\x28\xc2\x4c\x54\xf4\xfe\x77\x29\x6b\x45\x34\xc5\x87\x43\x92\x64\xeb\x69\x71\xab\x68\x99\xa5\x60\x24\xd9\x52\xea\x1a\x95\x9c\x18\x93\x63\x67\x8f\x99\xe0\x10\x89\x8b\x64\x90\x19\xca\x69\x69\x4f\xbc\xa5\x14\x56\x4b\x8e\x11\xab\x72\x6c\x20\xcd\xb5\x50\x8d\x75\xe8\x41\x26\x95\x65\x52\x14\x9f\xa4\xb1\x59\x1a\x17\xbd\xfd\x1f\x74\xdb\xdb\xce\xd2\x90\xdd\x99\xcc\xe5\xf8\x3b\xcd\x96\xf0\x86\xbe\x75\x1c\x5b\xf3\x44\xf4\x14\xd0\x59\xea\x9c\x45\xa8\xf8\x7a\x25\xa4\xa6\xbd\x9a\x1d\x6f\xc5\xb6\x6d\x1e\x45\x04\xe5\xc8\xff\x8e\xe1\xec\x48\xc3\x63\x51\xe7\x98\xf1\x42\x56\x3b\xef\x3a\xf1\x95\x6b\x5a\x6e\x16\xf2\x3e\x78\x06\x19\x27\x0b\xca\x83\xdd\x2a\xb6\x3b\x45\x7b\x40\x2f\x96\x79\x59\xee\xc4\x70\x81\xdc\x27\x44\xa7\xc7\xf0\x2c\x05\x96\xff\x4b\x07\x17\x01\x6c\xf0\xfb\x2f\x32\xbf\xd9\xd2\x69\x52\x31\xd9\xeb\x8c\x73\x16\xef\xc7\x48\x90\x9a\xb6\x24\x3f\xd7\x9a\x92\xca\x60\xe4\xef\x23\xc7\xdd\xda\x2b\xa2\x55\x94\x46\x2b\x5c\x44\x57\x72\x2e\xe6\x79\x24\xdc\x50\x7d\x75\xf3\xab\x63\x0d\xcb\x67\xe7\xfe\x20\xed\x1a\x17\xee\xf7\x8c\xaa\x3d\xf2\xf8\xed\x9a\x76\xbf\xb7\xb4\x56\x9c\x58\x18\xe2\x25\xe3\x96\x6a\x48\x86\xaf\xfa\x83\x5c\x52\x01\xdb\x45\xb6\x68\xac\x95\x02\x19\xbb\xe3\xc0\x54\x13\xbd\x62\x62\x6c\xa5\xba\x7c\xf7\x46\xdd\xcf\x70\x14\x19\x50\xb8\xad\x69\x61\x05\x82\xbf\xb1\xd2\x0c\x22\x76\xde\xe6\x2b\x8c\xa4\xb8\xe2\xac\xdc\xe4\x98\x98\x4d\x64\x1b\x8e\x66\xb8\x88\x76\x96\x86\x3c\x45\x96\x46\x7a\x10\x62\x4a\xcd\x14\x4c\xf2\xb2\x11\xa5\x1b\x6f\xd4\x8f\x45\x7b\x98\x5b\xa2\x51\x28\x02\xe5\xd1\xf8\x4a\x36\x50\xd2\xbc\xab\xe8\x0e\x58\x92\x41\x9a\x9e\x40\x6b\x00\x7d\xf4\x8b\xa3\x94\x90\xcd\x3d\x3d\x00\x78\x39\xc4\x2f\x8e\xaf\xd0\x68\x02\xa7\xed\x20\x01\x13\xde\x8d\x88\x8a\x8f\x48\x07\x39\x22\xa6\x7d\xc4\xf4\x31\xc4\x17\x66\x2c\x80\xe6\x21\xc7\xeb\x18\x76\xd7\x87\x18\xf0\x7f\xbe\xfd\xfe\x6d\x62\xac\x66\x62\xc5\x96\xbb\x61\x17\xda\x09\x0a\xad\xe1\xa0\x73\x17\xcc\x96\x68\xe8\x88\x7b\x8f\xc0\x68\xa2\xb4\x54\xc3\x6e\x36\x46\x23\x68\x91\x18\x36\x51\x8d\x59\x0f\x71\xc0\x3d\x08\x77\x43\xfd\x84\x68\x0f\x9b\xf5\xe5\xc4\x4e\x0d\x87\xe0\xbb\xfa\xd2\xf7\xf3\xdc\xb7\xf3\x09\xe6\xee\xb2\xcb\xdc\x1d\x92\x53\x71\x96\x28\x47\x78\xe1\xda\xdd\x5f\xfd\x19\x7f\x3b\x17\x2e\xf4\x51\x57\x1c\x4f\xe7\x3f\x20\xca\x0d\x7d\x98\xe4\x84\xce\x03\xfb\xf5\x3c\xbc\x88\x18\xec\xae\x21\x19\x54\xb2\x6c\x6a\xe8\xdc\x09\x97\x25\xf1\xcd\x0a\x72\xd3\xf8\x0f\xf2\x3d\xbe\x08\xbd\x77\x81\x5f\xb9\xb6\xca\xf1\x85\xfb\xc0\x2a\x5c\x32\xac\x83\x01\x3b\x21\x2b\xec\x04\x63\x96\x1c\x60\x78\xdb\x49\x80\xf1\xa5\xa2\x82\x29\xfd\x13\x00\x00\xff\xff\x92\x16\x0d\xfb\x8a\x07\x00\x00")

func templates_index_compare_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_index_compare_html,
		"templates/index_compare.html",
	)
}

func templates_index_compare_html() (*asset, error) {
	bytes, err := templates_index_compare_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/index_compare.html", size: 1930, mode: os.FileMode(420), modTime: time.Unix(1425685247, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_index_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x3c\x50\xcd\x4a\xf5\x30\x10\x5d\x37\x4f\x31\xcc\xea\xfb\x90\x6b\x05\x77\xde\xb4\x2e\xdc\xea\x13\x88\x48\x4c\xd3\x4b\x68\x9a\x84\x64\x2a\xb7\x84\xbe\xbb\xd3\x9b\xea\x22\x70\x32\x9c\x9f\x39\x53\xca\x60\x46\xeb\x0d\xa0\xf5\x83\xb9\x7e\x3a\x9b\x09\xb7\x4d\x08\x39\x86\x34\xf7\xa2\x29\x85\xcc\x1c\x9d\x22\xa6\x8c\xd6\x91\x49\x19\x01\x5f\x0f\x5a\x23\xb5\xf1\x3c\xeb\xe5\xd7\x42\x14\x3c\x64\x5a\x9d\xe9\x70\x56\xe9\x62\xfd\x89\x42\x7c\x7a\x7c\x88\xd7\x33\x02\xad\x91\xe7\x95\x85\xa0\x9d\xca\x99\xbf\xe4\x81\xdf\x29\x26\xcb\x8a\xf5\x86\xdd\x05\x21\xf8\x17\x67\xf5\xd4\xa1\xca\xd3\x1e\xf5\xef\xff\x19\xfb\x1d\xc8\xb6\x3a\xf4\xb2\x3d\x82\x85\x6c\xeb\xa6\x42\x66\x9d\x6c\xa4\x5e\x8c\x8b\xd7\x64\x79\x99\x3f\x35\x14\xd1\x7c\xab\x04\xb5\x00\x74\x07\x78\x53\x13\xd7\x79\xaf\x6d\x3e\x38\x44\x88\x66\x08\x7a\x99\xd9\xfa\xde\x05\xad\x6e\x2e\x1d\x60\xbb\x9f\xe5\x19\xef\xaa\xec\x2c\x36\x4e\xfd\x4d\x13\xa5\x18\x3f\xf0\x2d\x7e\x02\x00\x00\xff\xff\x0a\xbe\xbc\x64\x4b\x01\x00\x00")

func templates_index_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_index_list_html,
		"templates/index_list.html",
	)
}

func templates_index_list_html() (*asset, error) {
	bytes, err := templates_index_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/index_list.html", size: 331, mode: os.FileMode(420), modTime: time.Unix(1425685229, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_list_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x55\x51\x8f\xe3\x34\x10\x7e\x6e\x7f\x85\x31\x27\x36\x55\xb7\xe9\x22\x5e\x50\x9b\x14\xe9\x40\x27\x81\x16\x0e\x71\x77\xba\x87\x15\x42\x4e\xe2\x26\xbe\xba\x4e\x64\xbb\xa5\xab\x2a\xff\x9d\x99\xb1\xd3\xb4\xbb\x27\x1e\xb6\x6b\x7b\x66\xbe\x99\xf9\xe6\x8b\x9d\x35\x7e\xaf\x37\xd3\x49\xd6\x48\x51\xc1\xff\x49\xe6\x95\xd7\x72\xf3\xa8\x9c\x67\x0b\xf6\x56\x9a\xb2\x79\x2b\x9c\x64\x9f\x65\xf1\xe9\xd7\x6c\x19\xac\xe0\x77\x3e\x7b\xb9\xef\xb4\xf0\x92\x71\xe7\x9f\xb5\x74\x8d\x94\xde\x71\x96\xf6\x3d\xc0\x2d\x03\x1e\xac\x8a\xb6\x7a\xc6\xc5\x4d\x84\x11\xc7\x42\xd8\xe0\x4c\x26\xb5\x65\xe9\x2f\xb2\x38\xd4\x18\x0d\x55\x54\xea\xc8\x4a\x2d\x9c\xcb\x79\xa3\xea\x46\xc3\x9f\xe7\x8c\x12\xe5\xfc\x5f\x55\xf9\x66\xc5\x7e\x7c\x78\xe8\x4e\xeb\xbd\xb0\xb5\x32\x2b\x71\xf0\x6d\x5c\x2f\x8a\xd6\xfb\x76\xbf\x62\x3f\xa0\x9d\x6f\xce\xe7\xf4\xd3\x5f\x8f\x7d\x9f\x2d\x01\x35\xd4\x2e\x4d\x15\x32\x67\xad\x66\xaa\xca\xf9\xb6\x2d\x0f\xee\x1f\x0d\x5d\xf3\x21\x6f\x61\xa1\x85\xd2\x1e\xf6\xc5\xd7\x13\xb3\xeb\xcc\xec\xeb\xa9\xb1\x97\xd0\xdc\x3b\x4c\x10\x9b\xd3\x6a\x93\x09\xd6\x58\xb9\xcd\xf9\x17\x71\x14\xae\xb4\xaa\xf3\x2b\x27\xfd\x9f\xa2\x96\xc9\x99\x8a\x59\xdd\xdd\xf5\x33\x80\xc0\x49\x64\x4b\xb1\xc9\x96\x10\x16\xf0\xa4\x76\x72\x84\x0a\x0e\xa3\x91\x5a\x03\xd3\xb2\xd5\xc4\x3b\x71\x89\x3d\x52\x77\xd1\xcb\x0a\x53\x4b\x96\x7e\x14\x05\x4c\x2e\x62\x79\xdc\x0c\xdd\x87\x0d\xfd\x2e\x9a\xf6\x28\x6d\x5c\x3b\x0f\xb5\xca\x2a\xee\x8a\xd6\x56\xd2\x5e\xb6\xa6\x35\x5b\x7d\x50\x55\xc8\x02\x88\x83\xaa\x68\x63\x37\x70\xc0\xca\x56\xbb\x4e\x98\x9c\xc3\x58\x3e\x23\x9f\x7d\x7f\xe1\xd7\xcb\x93\x5f\x08\x18\xb6\x59\x95\xd2\x78\x69\xc3\xf4\x7e\x06\xcd\xd4\xad\x7d\xc6\x11\xfa\x06\x98\x00\xa8\x00\x7a\xad\x29\x92\x26\x0a\xf0\x23\x2d\x42\x53\x13\x8c\x88\x52\xa4\x22\x82\x1c\x5f\x05\x17\x28\xf4\x30\xfe\x94\x44\x8f\xac\x8e\x10\x97\x28\x58\x63\xa7\x61\x5d\xd8\x57\x9c\x93\xc2\x5e\x7e\x1e\x34\x5e\x77\x51\x7b\x16\x0e\x36\xd3\xed\xc1\x94\x5e\xb5\x86\x0d\x93\x87\xf6\xad\x98\xb1\xf3\x74\x52\x81\x04\xf6\x40\x41\xaa\xdb\x52\x90\x4f\x0e\x12\xdb\xc9\x47\x65\x76\xd1\x6d\x3d\xed\x6f\x10\x48\x61\x09\x69\x87\x20\x5e\xc8\x89\x7e\x7b\x8a\x1a\xc3\x7c\x5b\xd7\x5a\xbe\x53\x1a\xb8\x4e\x5c\x27\xcb\x7b\x76\x14\xfa\x20\x09\xe0\x28\x2c\xdb\x92\xc9\x41\xf6\x73\xbf\xbe\x3e\xfa\x00\x3a\x30\x35\x9c\xe3\x1c\x03\x00\x50\xce\xc1\x07\xd4\x9e\xdc\xf8\x7c\x03\x4e\x7c\x06\x8d\x8f\x60\xbf\x7d\x78\xff\x47\xda\x09\xeb\xe4\x8d\xeb\xec\x26\xdc\x3d\x61\x45\x7f\xb3\x3c\x8f\x45\x01\x44\x25\xb5\x04\x4e\x6f\x1c\x20\x08\xbf\x88\x31\xc1\x10\x17\xc2\xd6\xd7\x54\x04\x87\x15\xe5\x77\x94\x53\x6d\x9f\x87\x7c\xb3\x97\xf4\xbc\x60\x7c\x20\xa5\x12\x5e\x20\x23\x63\xc6\xd5\x2d\x0b\xf7\x60\xa1\x2f\x03\xf0\xc9\xf4\x3e\x6e\xa2\x6d\x2f\x4e\x74\xfc\xbb\x38\xc5\x93\x30\x23\x42\x09\x17\x05\x9e\x02\xe3\xd3\xc9\x9b\x54\x8a\xb2\x09\x15\xdc\xb3\xa1\xb4\x64\x77\x7f\xa4\x7a\x26\x58\xcc\xd3\x8e\xba\x85\x4e\xb1\x83\x50\x24\xb0\x2b\xf6\xc8\xf5\x13\x12\x14\x51\xd0\xf9\x06\x84\x45\x94\xe0\x9d\x76\x07\xd7\x24\x3b\x36\xe7\x39\x9f\x1f\x67\x17\x3c\x2b\xfd\xc1\x1a\xc6\x97\xf8\x85\xfc\xc4\xd9\x3c\xa2\xa7\x5f\x5a\x65\x12\xfe\x1d\x27\xde\x50\xff\x83\xb4\xa7\xaf\xef\xbd\x8b\xec\x49\x44\x78\x3c\xa8\x27\x76\xbc\x1e\x2d\xf4\xfc\xe4\x61\x9d\xba\x4e\x2b\x9f\xf0\x14\xb3\x50\x67\x70\x71\xaa\x13\x06\x43\x48\x6c\xec\x12\x75\xd5\x9d\xba\x07\x7d\xef\xa4\xa1\x0e\x51\x56\x0a\xa5\xf8\x80\x32\x8a\x10\x73\xc0\x48\x51\xb3\xe3\x9e\x22\xb0\xe7\x10\x90\xe7\x63\x41\xa9\x96\xa6\xf6\xcd\xe2\x7b\x44\x78\x93\xf0\x6f\xaf\x1e\x8d\x59\x2a\xba\x0e\xae\x81\x84\xe3\x95\xcc\xe7\x04\x33\xe7\x74\x2f\x63\xdd\x83\x42\xff\x37\x6c\x78\x14\xee\x90\xe1\x8b\xf6\xe2\xf7\x1b\x4a\xec\x67\x60\xe2\x77\x1b\xf4\xa0\x1c\xb8\xbd\x3c\x0f\x34\x07\xcc\x76\x35\x89\xab\xfb\x29\x5b\x86\x7b\x0c\x5e\x67\x7a\xf5\xa7\xff\x05\x00\x00\xff\xff\xfc\x91\x0a\x6e\xfe\x07\x00\x00")

func templates_list_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_list_html,
		"templates/list.html",
	)
}

func templates_list_html() (*asset, error) {
	bytes, err := templates_list_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/list.html", size: 2046, mode: os.FileMode(420), modTime: time.Unix(1426526425, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_navbar_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x52\xb1\x4e\xc3\x30\x10\x9d\x9b\xaf\xb0\x8e\x05\x86\x60\x66\xe4\x64\x28\x13\x12\x2b\x62\xbe\xd8\xd7\xd6\xc8\xd8\x96\xed\x44\x42\x51\xff\x1d\x9b\xb8\xa5\x04\x24\x16\x96\xdc\xdd\xcb\x7b\xb9\x7b\x4f\x99\x67\x45\x3b\x6d\x89\x81\xc5\x69\xc0\x00\xc7\x63\xd3\x08\xa5\x27\x26\x0d\xc6\xd8\x55\x98\x2d\xa5\xcd\x64\x1c\x4d\x82\xbe\xd9\xfc\x24\xb5\x07\x42\x45\xa1\xbc\xdc\x88\x61\x4c\xc9\x59\x96\xde\x3d\x75\xb0\x0c\xb0\xa2\x27\xb7\xdf\x1b\x02\xa6\x30\x61\x1d\x3a\x90\xce\x18\xf4\xf1\x0c\x63\xd8\x53\xea\xe0\xb6\x6a\x02\x45\xef\x6c\xd4\x13\xb5\x67\x66\xd9\xb7\x11\xd1\xa3\x3d\x2d\xd0\xd2\xd9\xb6\xb8\xe9\x05\x2f\xf8\x7f\x31\x04\x5f\x9c\x7c\xf6\xb8\xb2\x33\x04\xb4\x0a\xd8\x21\xd0\xae\x83\x57\x9c\x30\xca\xa0\x7d\xba\x9f\x9c\x56\xd7\x77\x37\xd0\x6f\xc9\xca\xc3\x16\x23\xb1\x17\x1a\x9e\x1f\x05\xc7\x12\x23\xcf\x39\xfe\x1e\xe7\xc9\x20\x3b\x37\x7f\x84\x20\x46\x73\xf1\x89\x13\x3b\x97\x1a\x91\xd1\x4c\xab\x0e\x8c\x8e\x69\x9b\x6c\x36\x86\xf5\x5a\x7e\x55\x30\xe8\x9f\xf2\xb3\x9c\x25\xb8\xd1\xdf\x24\xd2\xbd\x79\x0c\xb4\x56\x55\x18\xfa\x87\xa5\xb9\xd4\x0a\x3e\x9a\x2f\x7f\xb5\x34\xf3\x4c\x56\xe5\x7f\xec\x23\x00\x00\xff\xff\xc7\xcc\xa9\x46\x78\x02\x00\x00")

func templates_navbar_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_navbar_html,
		"templates/navbar.html",
	)
}

func templates_navbar_html() (*asset, error) {
	bytes, err := templates_navbar_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/navbar.html", size: 632, mode: os.FileMode(420), modTime: time.Unix(1424914310, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_scripts_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x91\xdd\x4e\xc4\x20\x10\x85\xef\xf7\x29\xb0\xf1\x42\x2f\x18\xb4\x7b\x69\xed\x4b\xf8\x04\x5d\x18\x9b\x69\xda\xa1\x32\xf8\x17\xb2\xef\x2e\x84\xb8\x6b\x52\x8d\xc9\xde\x31\x87\x73\x3e\x4e\x98\x94\x1c\x3e\x13\xa3\x6a\xc4\x06\x5a\xa3\x34\xc7\xe3\xae\xbb\xd2\x5a\x3d\xd5\x59\x1d\x70\x24\x66\xe2\x51\xb1\x7f\x57\x5a\xf7\xbb\xae\x5a\x95\x04\xfb\xd8\x18\x63\xbd\x43\x98\x5e\x5e\x31\x7c\x82\xf5\x8b\xa9\x47\xdd\xc2\x3d\xec\x61\x21\x86\x49\x9a\xbe\x33\x35\xb4\x49\x2f\xc3\x87\x75\x0c\x07\xef\xa3\xc4\x30\xac\x65\x28\x94\x93\x60\xf6\x19\xd3\x9a\x49\xce\xd2\x6f\xd4\x5c\x79\x53\xcc\x15\x97\xc3\x99\xde\x02\x30\xc6\x9f\x80\x21\x62\xa0\x61\xd6\x0e\x85\x46\x36\x77\xd0\xd6\x37\xbe\x2f\xfe\x2f\x7e\x09\x3d\xe7\xd7\x19\xe5\x6f\x78\x7f\x7d\x0a\x03\x31\xc5\x9b\xdb\x87\xb3\xa7\xfc\x7d\x4a\xc8\x2e\xaf\xe8\x2b\x00\x00\xff\xff\xde\x36\xfb\x5d\xb8\x01\x00\x00")

func templates_scripts_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_scripts_html,
		"templates/scripts.html",
	)
}

func templates_scripts_html() (*asset, error) {
	bytes, err := templates_scripts_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/scripts.html", size: 440, mode: os.FileMode(420), modTime: time.Unix(1424903546, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_stylesheets_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x94\x4d\x6e\xdb\x30\x10\x85\xd7\xe1\x29\x18\x65\xd3\x2e\x28\xd5\x4e\x81\x56\x8a\xe3\x6d\xcf\x41\x89\x43\x89\x0d\xc5\x21\xc8\xf1\x4f\x20\xf8\xee\x25\x8d\x54\x49\x0a\xdb\x75\x0a\x54\x03\x2d\x34\x23\x7e\xef\xcd\x03\xa4\x69\x52\xa0\x8d\x03\x5e\x44\x7a\xb6\x10\x07\x00\x8a\xc5\xe1\xc0\x56\xd6\xb8\x27\x1e\xc0\x3e\xbe\x99\x14\x7c\x08\xa0\x1f\x8b\xaa\x1a\xe5\xbe\x53\xae\x6c\x11\x29\x52\x90\x3e\x3f\x74\x38\x56\x73\xa3\xba\x2f\xef\xcb\x65\xd5\xc5\xf8\xda\x2b\x47\x93\xde\x8a\xb1\xe0\xd5\xfa\xbf\x08\x08\x1a\x60\x84\xf7\x32\xb7\x42\xfc\x4d\x2b\xb3\x7f\x46\x05\xd6\x6c\x43\xe9\x80\xde\x3a\x96\x04\xc1\x48\x2b\x14\x44\xd3\xbb\xea\x4b\xb9\x7c\x11\x9d\x27\x3b\x8d\x8e\x3e\xb2\xda\x3f\xc9\x05\xe3\x7d\x22\xcd\x1a\x42\xac\x19\x5b\x1d\xf1\x6b\x56\x92\x6c\x2d\x08\x87\x4e\xdb\x8d\x51\x7c\x62\x37\x3b\xa3\x68\x68\xb8\xdc\x10\xf2\x5b\x33\x7a\x0c\x24\x1d\x3d\xb0\x9b\x51\x86\xde\xb8\x26\x0f\x1e\xd8\x81\xb1\x72\x30\xfd\x60\xd3\x4d\xf9\x98\x97\x4a\x19\xd7\x37\xbc\xf6\x7b\xbe\xf8\xea\xf7\xf3\x09\xd1\x22\x11\x8e\xcd\xef\x6e\x2b\xbb\xa7\x3e\xe0\xc6\x29\xd1\xa1\xc5\xd0\xf0\x3b\xfd\x2d\x55\x9d\x67\x18\x14\xa4\xce\x22\x41\x22\xda\xe4\xe8\x0e\x16\xa9\xbe\xcf\x33\x11\xa4\x32\x9b\xd8\xf0\x23\x2c\xdb\x08\xb8\xfb\x91\x70\x7e\xd1\x38\x1a\x04\x6a\x41\xcf\x1e\x3e\xc1\x16\xdc\xe7\x6c\xec\x84\x1c\xd4\x3a\x5d\xef\xb6\x3b\x9c\xe3\xa0\x52\xe7\x30\x5d\xad\x53\x5d\x87\x39\xda\x69\x06\xdc\x42\x38\x43\x53\x35\x68\xf8\x80\xa9\x8b\xb0\xb6\x86\x54\x7f\xc0\x5e\x69\xcb\xab\xa3\xd2\x3a\x87\x75\xce\xd5\xf2\xda\xa8\x74\xdd\x5d\x88\xea\x84\x9d\x8b\xdb\x81\xce\x61\x5d\x6f\xea\x32\xac\x6e\x4f\x44\xb5\xaa\x5e\xbe\x90\x69\x02\xa7\xd2\x6f\xed\x57\x00\x00\x00\xff\xff\x32\xb9\x10\x25\xf0\x04\x00\x00")

func templates_stylesheets_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_stylesheets_html,
		"templates/stylesheets.html",
	)
}

func templates_stylesheets_html() (*asset, error) {
	bytes, err := templates_stylesheets_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/stylesheets.html", size: 1264, mode: os.FileMode(420), modTime: time.Unix(1426526345, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _templates_titles_html = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4c\x8f\xc1\x0e\x82\x30\x10\x44\xcf\xf0\x15\x4d\x2f\xe8\x05\xee\xa6\x70\x34\x7e\x80\x89\xe7\x06\x16\x5a\x43\x0a\x69\x57\x3d\x34\xfb\xef\x2e\xad\xa2\xb7\xbe\xe9\xcc\x64\x36\xc6\x01\x46\xeb\x40\x48\xb4\x38\x43\x90\x44\x65\x19\xa3\xd7\x6e\x02\x51\x33\x28\xf4\x5d\x59\xfc\x2b\x85\x42\x23\xfa\x65\x0e\xab\x76\xad\x8c\xb1\xbe\xd9\x01\x0d\x91\x14\x7e\x79\xed\xe2\x05\xec\x64\x90\x55\x4e\x73\xdc\x8e\xa2\x3e\x2f\xfd\x23\x6c\x05\x85\xd2\xc2\x78\x18\x5b\x79\xd7\x4f\x1d\x7a\x6f\x57\x3c\x05\xc0\x64\x38\x54\x9c\xfe\x58\xab\xa3\xec\x98\xae\xdb\x34\x22\xd5\xe8\x5c\x06\x73\x80\xd4\xf3\xfb\xcb\xba\x1b\xd2\xbe\x06\x4d\xda\x9c\x99\x91\x4f\xf8\xd2\xfe\x78\x07\x00\x00\xff\xff\xbe\xfa\x61\x1d\xfa\x00\x00\x00")

func templates_titles_html_bytes() ([]byte, error) {
	return bindata_read(
		_templates_titles_html,
		"templates/titles.html",
	)
}

func templates_titles_html() (*asset, error) {
	bytes, err := templates_titles_html_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "templates/titles.html", size: 250, mode: os.FileMode(420), modTime: time.Unix(1425060581, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/benchlist.html": templates_benchlist_html,
	"templates/compare.html": templates_compare_html,
	"templates/filters.html": templates_filters_html,
	"templates/index.html": templates_index_html,
	"templates/index_compare.html": templates_index_compare_html,
	"templates/index_list.html": templates_index_list_html,
	"templates/list.html": templates_list_html,
	"templates/navbar.html": templates_navbar_html,
	"templates/scripts.html": templates_scripts_html,
	"templates/stylesheets.html": templates_stylesheets_html,
	"templates/titles.html": templates_titles_html,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"templates": &_bintree_t{nil, map[string]*_bintree_t{
		"benchlist.html": &_bintree_t{templates_benchlist_html, map[string]*_bintree_t{
		}},
		"compare.html": &_bintree_t{templates_compare_html, map[string]*_bintree_t{
		}},
		"filters.html": &_bintree_t{templates_filters_html, map[string]*_bintree_t{
		}},
		"index.html": &_bintree_t{templates_index_html, map[string]*_bintree_t{
		}},
		"index_compare.html": &_bintree_t{templates_index_compare_html, map[string]*_bintree_t{
		}},
		"index_list.html": &_bintree_t{templates_index_list_html, map[string]*_bintree_t{
		}},
		"list.html": &_bintree_t{templates_list_html, map[string]*_bintree_t{
		}},
		"navbar.html": &_bintree_t{templates_navbar_html, map[string]*_bintree_t{
		}},
		"scripts.html": &_bintree_t{templates_scripts_html, map[string]*_bintree_t{
		}},
		"stylesheets.html": &_bintree_t{templates_stylesheets_html, map[string]*_bintree_t{
		}},
		"titles.html": &_bintree_t{templates_titles_html, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

